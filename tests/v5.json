{
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "bool",
                    "name": "success",
                    "type": "bool"
                }
            ],
            "payable": False,
            "stateMutability": "nonpayable",
            "type": "constructor",
            "name": "constructor"
        },
        {
            "constant": False,
            "inputs": [],
            "name": "callImported",
            "outputs": [],
            "payable": False,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": False,
            "inputs": [],
            "name": "increment",
            "outputs": [],
            "payable": False,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": True,
            "inputs": [],
            "name": "number",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": False,
            "stateMutability": "view",
            "type": "function"
        }
    ],
    "allSourcePaths": {
        "0": "contracts/DummyVersion5Contract.sol",
        "1": "contracts/ImportMev5.sol"
    },
    "ast": {
        "absolutePath": "contracts/DummyVersion5Contract.sol",
        "exportedSymbols": {
            "DummyVersion5Contract": [
                23
            ]
        },
        "id": 24,
        "nodeType": "SourceUnit",
        "nodes": [
            {
                "id": 1,
                "literals": [
                    "solidity",
                    "^",
                    "0.5",
                    ".0"
                ],
                "nodeType": "PragmaDirective",
                "src": "32: 23: 0"
            },
            {
                "id": 2,
                "literals": [
                    "experimental",
                    "ABIEncoderV2"
                ],
                "nodeType": "PragmaDirective",
                "src": "56: 33: 0"
            },
            {
                "absolutePath": "contracts/ImportMev5.sol",
                "file": "./ImportMev5.sol",
                "id": 3,
                "nodeType": "ImportDirective",
                "scope": 24,
                "sourceUnit": 43,
                "src": "91: 26: 0",
                "symbolAliases": [],
                "unitAlias": ""
            },
            {
                "baseContracts": [
                    {
                        "arguments": None,
                        "baseName": {
                            "contractScope": None,
                            "id": 4,
                            "name": "ImportMev5",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 42,
                            "src": "229: 10: 0",
                            "typeDescriptions": {
                                "typeIdentifier": "t_contract$_ImportMev5_$42",
                                "typeString": "contract ImportMev5"
                            }
                        },
                        "id": 5,
                        "nodeType": "InheritanceSpecifier",
                        "src": "229: 10: 0"
                    }
                ],
                "contractDependencies": [
                    42
                ],
                "contractKind": "contract",
                "documentation": "@notice This is the main contract used to test Brownie functionality ",
                "fullyImplemented": True,
                "id": 23,
                "linearizedBaseContracts": [
                    23,
                    42
                ],
                "name": "DummyVersion5Contract",
                "nodeType": "ContractDefinition",
                "nodes": [
                    {
                        "body": {
                            "id": 14,
                            "nodeType": "Block",
                            "src": "279: 33: 0",
                            "statements": [
                                {
                                    "expression": {
                                        "argumentTypes": None,
                                        "arguments": [
                                            {
                                                "argumentTypes": None,
                                                "id": 11,
                                                "name": "success",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 7,
                                                "src": "297: 7: 0",
                                                "typeDescriptions": {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                }
                                            }
                                        ],
                                        "expression": {
                                            "argumentTypes": [
                                                {
                                                    "typeIdentifier": "t_bool",
                                                    "typeString": "bool"
                                                }
                                            ],
                                            "id": 10,
                                            "name": "require",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [
                                                60,
                                                61
                                            ],
                                            "referencedDeclaration": 60,
                                            "src": "289: 7: 0",
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                                                "typeString": "function (bool) pure"
                                            }
                                        },
                                        "id": 12,
                                        "isConstant": False,
                                        "isLValue": False,
                                        "isPure": False,
                                        "kind": "functionCall",
                                        "lValueRequested": False,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "289: 16: 0",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                        }
                                    },
                                    "id": 13,
                                    "nodeType": "ExpressionStatement",
                                    "src": "289: 16: 0"
                                }
                            ]
                        },
                        "documentation": None,
                        "id": 15,
                        "implemented": True,
                        "kind": "constructor",
                        "modifiers": [],
                        "name": "",
                        "nodeType": "FunctionDefinition",
                        "parameters": {
                            "id": 8,
                            "nodeType": "ParameterList",
                            "parameters": [
                                {
                                    "constant": False,
                                    "id": 7,
                                    "name": "success",
                                    "nodeType": "VariableDeclaration",
                                    "scope": 15,
                                    "src": "258: 12: 0",
                                    "stateVariable": False,
                                    "storageLocation": "default",
                                    "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                    },
                                    "typeName": {
                                        "id": 6,
                                        "name": "bool",
                                        "nodeType": "ElementaryTypeName",
                                        "src": "258: 4: 0",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                        }
                                    },
                                    "value": None,
                                    "visibility": "internal"
                                }
                            ],
                            "src": "257: 14: 0"
                        },
                        "returnParameters": {
                            "id": 9,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "279: 0: 0"
                        },
                        "scope": 23,
                        "src": "245: 67: 0",
                        "stateMutability": "nonpayable",
                        "superFunction": None,
                        "visibility": "public"
                    },
                    {
                        "body": {
                            "id": 21,
                            "nodeType": "Block",
                            "src": "349: 28: 0",
                            "statements": [
                                {
                                    "expression": {
                                        "argumentTypes": None,
                                        "arguments": [],
                                        "expression": {
                                            "argumentTypes": [],
                                            "id": 18,
                                            "name": "increment",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 41,
                                            "src": "359: 9: 0",
                                            "typeDescriptions": {
                                                "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                                                "typeString": "function ()"
                                            }
                                        },
                                        "id": 19,
                                        "isConstant": False,
                                        "isLValue": False,
                                        "isPure": False,
                                        "kind": "functionCall",
                                        "lValueRequested": False,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "359: 11: 0",
                                        "typeDescriptions": {
                                            "typeIdentifier": "t_tuple$__$",
                                            "typeString": "tuple()"
                                        }
                                    },
                                    "id": 20,
                                    "nodeType": "ExpressionStatement",
                                    "src": "359: 11: 0"
                                }
                            ]
                        },
                        "documentation": None,
                        "id": 22,
                        "implemented": True,
                        "kind": "function",
                        "modifiers": [],
                        "name": "callImported",
                        "nodeType": "FunctionDefinition",
                        "parameters": {
                            "id": 16,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "339: 2: 0"
                        },
                        "returnParameters": {
                            "id": 17,
                            "nodeType": "ParameterList",
                            "parameters": [],
                            "src": "349: 0: 0"
                        },
                        "scope": 23,
                        "src": "318: 59: 0",
                        "stateMutability": "nonpayable",
                        "superFunction": None,
                        "visibility": "public"
                    }
                ],
                "scope": 24,
                "src": "195: 185: 0"
            }
        ],
        "src": "32: 349: 0"
    },
    "bytecode": "608060405234801561001057600080fd5b5060405161018738038061018783398101604081905261002f91610050565b8061003957600080fd5b50610092565b805161004a8161007b565b92915050565b60006020828403121561006257600080fd5b600061006e848461003f565b949350505050565b151590565b61008481610076565b811461008f57600080fd5b50565b60e7806100a06000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c80636c5e44271460415780638381f58a146049578063d09de08a146063575b600080fd5b60476069565b005b604f6071565b604051605a9190608f565b60405180910390f35b60476077565b606f6077565b565b60005481565b600080546001019055565b60898160a1565b82525050565b60208101609b82846082565b92915050565b9056fea365627a7a7231582082143e5708777bcdf53cc6f002ea6c7b8402542a85a859757be68e939ef3ead76c6578706572696d656e74616cf564736f6c63430005110040",
    "bytecodeSha1": "b1b70f95b17a7ab9e3b516375e319d4aeb8417e5",
    "compiler": {
        "evm_version": "istanbul",
        "optimizer": {
            "enabled": True,
            "runs": 200
        },
        "version": "0.5.17+commit.d19bba13"
    },
    "contractName": "DummyVersion5Contract",
    "coverageMap": {
        "branches": {
            "0": {},
            "1": {}
        },
        "statements": {
            "0": {
                "DummyVersion5Contract.callImported": {
                    "0": [
                        359,
                        370
                    ]
                }
            },
            "1": {
                "ImportMev5.increment": {
                    "1": [
                        222,
                        241
                    ]
                }
            }
        }
    },
    "dependencies": [
        "ImportMev5"
    ],
    "deployedBytecode": "6080604052348015600f57600080fd5b5060043610603c5760003560e01c80636c5e44271460415780638381f58a146049578063d09de08a146063575b600080fd5b60476069565b005b604f6071565b604051605a9190608f565b60405180910390f35b60476077565b606f6077565b565b60005481565b600080546001019055565b60898160a1565b82525050565b60208101609b82846082565b92915050565b9056fea365627a7a7231582082143e5708777bcdf53cc6f002ea6c7b8402542a85a859757be68e939ef3ead76c6578706572696d656e74616cf564736f6c63430005110040",
    "deployedSourceMap": "195: 185: 0:-;;;;8: 9: -1;5: 2;;;30: 1;27;20: 12;5: 2;195: 185: 0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;318: 59;;;: : :i;: : :-;;129: 21: 1;;;: : :i;: : :-;;;;;;;;;;;;;;;;185: 63;;;: : :i;318: 59: 0:-;359: 11;: 9;: 11: :i;: : :-;318: 59: :o;129: 21: 1:-;;;;: : :o;185: 63: :-;231: 6;;;240: 1;231: 10;222: 19;;185: 63: :o;5: 113: -1:-;88: 24;106: 5;88: 24;;;83: 3;76: 37;70: 48;;;125: 213;243: 2;228: 18;;257: 71;232: 9;301: 6;257: 71;;;214: 124;;;;;345: 72;407: 5;390: 27",
    "language": "Solidity",
    "natspec": {
        "methods": {},
        "notice": "This is the main contract used to test Brownie functionality "
    },
    "offset": [
        195,
        380
    ],
    "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6C5E4427 EQ PUSH1 0x41 JUMPI DUP1 PUSH4 0x8381F58A EQ PUSH1 0x49 JUMPI DUP1 PUSH4 0xD09DE08A EQ PUSH1 0x63 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x47 PUSH1 0x69 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x4F PUSH1 0x71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x5A SWAP2 SWAP1 PUSH1 0x8F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x47 PUSH1 0x77 JUMP JUMPDEST PUSH1 0x6F PUSH1 0x77 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x89 DUP2 PUSH1 0xA1 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x9B DUP3 DUP5 PUSH1 0x82 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 JUMP INVALID LOG3 PUSH6 0x627A7A723158 KECCAK256 DUP3 EQ RETURNDATACOPY JUMPI ADDMOD PUSH24 0x7BCDF53CC6F002EA6C7B8402542A85A859757BE68E939EF3 0xEA 0xD7 PUSH13 0x6578706572696D656E74616CF5 PUSH5 0x736F6C6343 STOP SDIV GT STOP BLOCKHASH ",
    "pcMap": {
        0: {
            "offset": [
                195,
                380
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x80"
        },
        2: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x40"
        },
        4: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "MSTORE",
            "path": "0"
        },
        5: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "CALLVALUE",
            "path": "0"
        },
        6: {
            "op": "DUP1"
        },
        7: {
            "op": "ISZERO"
        },
        8: {
            "op": "PUSH1",
            "value": "0xF"
        },
        10: {
            "op": "JUMPI"
        },
        11: {
            "op": "PUSH1",
            "value": "0x0"
        },
        13: {
            "op": "DUP1"
        },
        14: {
            "dev": "Cannot send ether to nonpayable function",
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "REVERT",
            "path": "0"
        },
        15: {
            "op": "JUMPDEST"
        },
        16: {
            "offset": [
                195,
                380
            ],
            "op": "POP",
            "path": "0"
        },
        17: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x4"
        },
        19: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "CALLDATASIZE",
            "path": "0"
        },
        20: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "LT",
            "path": "0"
        },
        21: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x3C"
        },
        23: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "JUMPI",
            "path": "0"
        },
        24: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x0"
        },
        26: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "CALLDATALOAD",
            "path": "0"
        },
        27: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0xE0"
        },
        29: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "SHR",
            "path": "0"
        },
        30: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "DUP1",
            "path": "0"
        },
        31: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH4",
            "path": "0",
            "value": "0x6C5E4427"
        },
        36: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "EQ",
            "path": "0"
        },
        37: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x41"
        },
        39: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "JUMPI",
            "path": "0"
        },
        40: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "DUP1",
            "path": "0"
        },
        41: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH4",
            "path": "0",
            "value": "0x8381F58A"
        },
        46: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "EQ",
            "path": "0"
        },
        47: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x49"
        },
        49: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "JUMPI",
            "path": "0"
        },
        50: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "DUP1",
            "path": "0"
        },
        51: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH4",
            "path": "0",
            "value": "0xD09DE08A"
        },
        56: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "EQ",
            "path": "0"
        },
        57: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x63"
        },
        59: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "JUMPI",
            "path": "0"
        },
        60: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "JUMPDEST",
            "path": "0"
        },
        61: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x0"
        },
        63: {
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "DUP1",
            "path": "0"
        },
        64: {
            "first_revert": True,
            "fn": None,
            "offset": [
                195,
                380
            ],
            "op": "REVERT",
            "path": "0"
        },
        65: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                318,
                377
            ],
            "op": "JUMPDEST",
            "path": "0"
        },
        66: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                318,
                377
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x47"
        },
        68: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                318,
                377
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x69"
        },
        70: {
            "fn": "DummyVersion5Contract.callImported",
            "jump": "i",
            "offset": [
                318,
                377
            ],
            "op": "JUMP",
            "path": "0"
        },
        71: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                318,
                377
            ],
            "op": "JUMPDEST",
            "path": "0"
        },
        72: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                318,
                377
            ],
            "op": "STOP",
            "path": "0"
        },
        73: {
            "offset": [
                129,
                150
            ],
            "op": "JUMPDEST",
            "path": "1"
        },
        74: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "PUSH1",
            "path": "1",
            "value": "0x4F"
        },
        76: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "PUSH1",
            "path": "1",
            "value": "0x71"
        },
        78: {
            "fn": "DummyVersion5Contract.callImported",
            "jump": "i",
            "offset": [
                129,
                150
            ],
            "op": "JUMP",
            "path": "1"
        },
        79: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "JUMPDEST",
            "path": "1"
        },
        80: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "PUSH1",
            "path": "1",
            "value": "0x40"
        },
        82: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "MLOAD",
            "path": "1"
        },
        83: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "PUSH1",
            "path": "1",
            "value": "0x5A"
        },
        85: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "SWAP2",
            "path": "1"
        },
        86: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "SWAP1",
            "path": "1"
        },
        87: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "PUSH1",
            "path": "1",
            "value": "0x8F"
        },
        89: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "JUMP",
            "path": "1"
        },
        90: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "JUMPDEST",
            "path": "1"
        },
        91: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "PUSH1",
            "path": "1",
            "value": "0x40"
        },
        93: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "MLOAD",
            "path": "1"
        },
        94: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "DUP1",
            "path": "1"
        },
        95: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "SWAP2",
            "path": "1"
        },
        96: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "SUB",
            "path": "1"
        },
        97: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "SWAP1",
            "path": "1"
        },
        98: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "RETURN",
            "path": "1"
        },
        99: {
            "fn": "ImportMev5.increment",
            "offset": [
                185,
                248
            ],
            "op": "JUMPDEST",
            "path": "1"
        },
        100: {
            "fn": "ImportMev5.increment",
            "offset": [
                185,
                248
            ],
            "op": "PUSH1",
            "path": "1",
            "value": "0x47"
        },
        102: {
            "fn": "ImportMev5.increment",
            "offset": [
                185,
                248
            ],
            "op": "PUSH1",
            "path": "1",
            "value": "0x77"
        },
        104: {
            "fn": "ImportMev5.increment",
            "jump": "i",
            "offset": [
                185,
                248
            ],
            "op": "JUMP",
            "path": "1"
        },
        105: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                318,
                377
            ],
            "op": "JUMPDEST",
            "path": "0"
        },
        106: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                359,
                370
            ],
            "op": "PUSH1",
            "path": "0",
            "statement": 0,
            "value": "0x6F"
        },
        108: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                359,
                368
            ],
            "op": "PUSH1",
            "path": "0",
            "value": "0x77"
        },
        110: {
            "fn": "DummyVersion5Contract.callImported",
            "jump": "i",
            "offset": [
                359,
                370
            ],
            "op": "JUMP",
            "path": "0"
        },
        111: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                359,
                370
            ],
            "op": "JUMPDEST",
            "path": "0"
        },
        112: {
            "fn": "DummyVersion5Contract.callImported",
            "jump": "o",
            "offset": [
                318,
                377
            ],
            "op": "JUMP",
            "path": "0"
        },
        113: {
            "offset": [
                129,
                150
            ],
            "op": "JUMPDEST",
            "path": "1"
        },
        114: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "PUSH1",
            "path": "1",
            "value": "0x0"
        },
        116: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "SLOAD",
            "path": "1"
        },
        117: {
            "fn": "DummyVersion5Contract.callImported",
            "offset": [
                129,
                150
            ],
            "op": "DUP2",
            "path": "1"
        },
        118: {
            "fn": "DummyVersion5Contract.callImported",
            "jump": "o",
            "offset": [
                129,
                150
            ],
            "op": "JUMP",
            "path": "1"
        },
        119: {
            "fn": "ImportMev5.increment",
            "offset": [
                185,
                248
            ],
            "op": "JUMPDEST",
            "path": "1"
        },
        120: {
            "fn": "ImportMev5.increment",
            "offset": [
                231,
                237
            ],
            "op": "PUSH1",
            "path": "1",
            "statement": 1,
            "value": "0x0"
        },
        122: {
            "fn": "ImportMev5.increment",
            "offset": [
                231,
                237
            ],
            "op": "DUP1",
            "path": "1"
        },
        123: {
            "fn": "ImportMev5.increment",
            "offset": [
                231,
                237
            ],
            "op": "SLOAD",
            "path": "1"
        },
        124: {
            "fn": "ImportMev5.increment",
            "offset": [
                240,
                241
            ],
            "op": "PUSH1",
            "path": "1",
            "value": "0x1"
        },
        126: {
            "fn": "ImportMev5.increment",
            "offset": [
                231,
                241
            ],
            "op": "ADD",
            "path": "1"
        },
        127: {
            "fn": "ImportMev5.increment",
            "offset": [
                222,
                241
            ],
            "op": "SWAP1",
            "path": "1"
        },
        128: {
            "fn": "ImportMev5.increment",
            "offset": [
                222,
                241
            ],
            "op": "SSTORE",
            "path": "1"
        },
        129: {
            "fn": "ImportMev5.increment",
            "jump": "o",
            "offset": [
                185,
                248
            ],
            "op": "JUMP",
            "path": "1"
        },
        130: {
            "op": "JUMPDEST"
        },
        131: {
            "op": "PUSH1",
            "value": "0x89"
        },
        133: {
            "op": "DUP2"
        },
        134: {
            "op": "PUSH1",
            "value": "0xA1"
        },
        136: {
            "op": "JUMP"
        },
        137: {
            "op": "JUMPDEST"
        },
        138: {
            "op": "DUP3"
        },
        139: {
            "op": "MSTORE"
        },
        140: {
            "op": "POP"
        },
        141: {
            "op": "POP"
        },
        142: {
            "op": "JUMP"
        },
        143: {
            "op": "JUMPDEST"
        },
        144: {
            "op": "PUSH1",
            "value": "0x20"
        },
        146: {
            "op": "DUP2"
        },
        147: {
            "op": "ADD"
        },
        148: {
            "op": "PUSH1",
            "value": "0x9B"
        },
        150: {
            "op": "DUP3"
        },
        151: {
            "op": "DUP5"
        },
        152: {
            "op": "PUSH1",
            "value": "0x82"
        },
        154: {
            "op": "JUMP"
        },
        155: {
            "op": "JUMPDEST"
        },
        156: {
            "op": "SWAP3"
        },
        157: {
            "op": "SWAP2"
        },
        158: {
            "op": "POP"
        },
        159: {
            "op": "POP"
        },
        160: {
            "op": "JUMP"
        },
        161: {
            "op": "JUMPDEST"
        },
        162: {
            "op": "SWAP1"
        },
        163: {
            "op": "JUMP"
        }
    },
    "sha1": "c91dbf62edecc7e86ebf78af337fdcbfe2393bbe",
    "source": " // SPDX-License-Identifier: MIT\npragma solidity ^0.5.0;\npragma experimental ABIEncoderV2;\n\nimport "./ImportMev5.sol";\n\n/** @notice This is the main contract used to test Brownie functionality */\ncontract DummyVersion5Contract is ImportMev5{\n    constructor (bool success) public {\n        require(success);\n    }\n\n    function callImported() public {\n        increment();\n    }\n\n}\n",
    "sourceMap": "195:185:0:-;;;245:67;8:9:-1;5:2;;;30:1;27;20:12;5:2;245:67:0;;;;;;;;;;;;;;;;;;;;;297:7;289:16;;;;;;245:67;195:185;;5:128:-1;80:13;;98:30;80:13;98:30;;;65:68;;;;;140:257;;252:2;240:9;231:7;227:23;223:32;220:2;;;268:1;265;258:12;220:2;303:1;320:61;373:7;353:9;320:61;;;310:71;214:183;-1:-1;;;;214:183;404:85;470:13;463:21;;446:43;496:111;562:21;577:5;562:21;;;555:5;552:32;542:2;;598:1;595;588:12;542:2;536:71;;;195:185:0;;;;;;",
    "sourcePath": "contracts/DummyVersion5Contract.sol",
    "type": "contract"
}
